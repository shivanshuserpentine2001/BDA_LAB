[8:28 PM, 7/14/2022] Priya Potana: driver
import java.io.IOException;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class driver extends Configured implements Tool {
	public int run(String args[]) throws IOException
	{
	if (args.length < 2)
		{
		System.out.println("Please give valid inputs");
		return -1;
		}
	
	JobConf conf = new JobConf(driver.class);
	FileInputFormat.setInputPaths(conf, new Path(args[0]));
	FileOutputForm…
[8:28 PM, 7/14/2022] Priya Potana: https://www.geeksforgeeks.org/sum-of-even-and-odd-numbers-in-hadoop-using-cloudera-distribution-hadoop-cdh/amp/
[8:29 PM, 7/14/2022] Priya Potana: https://www.geeksforgeeks.org/sum-of-even-and-odd-numbers-in-hadoop-using-cloudera-distribution-hadoop-cdh/amp/
[8:29 PM, 7/14/2022] Priya Potana: import java.io.IOException;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class driver extends Configured implements Tool {
	public int run(String args[]) throws IOException
	{
	if (args.length < 2)
		{
		System.out.println("Please give valid inputs");
		return -1;
		}
	
	JobConf conf = new JobConf(driver.class);
	FileInputFormat.setInputPaths(conf, new Path(args[0]));
	FileOutputFormat.setO…
[8:29 PM, 7/14/2022] Priya Potana: import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;

import org.apache.hadoop.mapred.Reporter;
public class sqMapper extends MapReduceBase implements
Mapper<LongWritable,Text, Text, IntWritable> {
// Map function
public void map(LongWritable key, Text value, OutputCollector<Text,
IntWritable> output, Reporter rep) throws IOException
	{
	
	String line = value.toString();	
	// Splitting the line on spaces
	for (String num : line.split(" "))
		{
		int n = Integer.parseInt(num);
		int square = n * n;
		output.collect(new Text(num), new IntWritable(square));
		
		}
	}
}
[8:29 PM, 7/14/2022] Priya Potana: import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;

public class sqReducer extends MapReduceBase implements
Reducer<Text,IntWritable, Text, IntWritable> {
// Reduce function
public void reduce(Text key, Iterator<IntWritable> value,
OutputCollector<Text, IntWritable> output,
Reporter rep) throws IOException
{
	
int sum = 0;
// Counting the frequency of each words
	while (value.hasNext())
	{
	IntWritable i = value.next();
	sum += i.get();
	}
output.collect(key, new IntWritable(sum));
}
}
